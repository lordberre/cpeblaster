#!/bin/bash
# Version 0.5

# Enable or disable AP checking
ap_checking=true
server_unreachable=true # Use "true" if server is unreahable for host running wrapper script
# Broadcom AP
# In order to use this, the phy.sh script need to be in /var/ of the AP device and the screen session must be up to the eRouter

# Celeno AP
# The AP must have internet access and the firewall must be open for the servers SNMP calls

# Configure the locations of external scripts and logdir
CELENO_SCRIPT="/home/lordberre-server/screens/ap_physcripting/./celeno_iw-snmp_forloop.sh"
BROADCOM_SCRIPT="/home/lordberre-server/screens/ap_physcripting/3384_expect_forloop AC:BC:32:9B:EC:F5 macpro_5m-nlos"
iperf3log="/var/log/iperf3_wrapper.log"
IPERF3_SCRIPT="/home/chprobe/tcp_iperf3_clientv3.sh"
SCREENLOGFILE="/home/lordberre-server/screens/usb0/sagem-rev3/screenlog.0"
REDIRECT="/var/log/apdata.txt" # Output file (both Broadcom and Celeno)
TEST_LENGTH=40

# Paths for console output / log transfer (Broadcom AP)
brcm_logpath1=/home/lordberre-server/screens/usb0/3890v3/screenlog.0
brcm_logpath2=$REDIRECT

# Assign all vars
AP_TYPE=false
AP_LABEL=false
AP_IP=false
STA_MAC=false;STA_TYPE=false
AP_RADIO=false
CONSOLE=false
IPERFSERVER=false
TARGET=false
downstream=false;upstream=false
remote_test=false
LABEL1=label1
LABEL2=label2


# remote iperf3 vars
logtag=iperf3tcp
declare -i chprobe_iperf3tcp_sessions=15
declare -i chprobe_iperf3tcp_duration=40
declare -i chprobe_iperf3tcp_omitduration=10

usage () {
cat <<USAGE
How to use: $0 -4 or -6 must be specified.
    -d) Measure downstream to STA (mandatory)
    -u) Measure upstream from STA (mandatory)
    -p) Set iperf3 server IP (mandatory)
    -a) Set ansible/STA (mandatory)
    -t) Set AP type ("celeno" or "broadcom") (mandatory)
    -l) Set AP label (mandatory)
    -s) Set STA type ("mac", "linux" or "win") (mandatory)
    -m) Set STA Mac (format AA:BB:CC:DD:EE:FF) (mandatory)
    -r) Set AP radio ("5ghz" or "2.4ghz" or "bs" (bandsteering)) (mandatory)
    -c) Set console name (Broadcom AP only)
    -f) Trigger a remote test rather (Sta is iperf3 server)
    -i) Set AP IP (celeno AP only)
    -y) Extra AP label 1
    -z) Extra AP label 2
    -h) Show help
    -v) Increase verbosity

USAGE
 }

options='t:l:i:m:r:c:p:a:s:y:z:fudhv'

while getopts $options option
do
    case $option in
        u  ) upstream=true;;
        h  ) usage; exit;;
        d  ) downstream=true;;
        t ) AP_TYPE=${OPTARG};;
        l  ) AP_LABEL=${OPTARG};;
        i  ) AP_IP=${OPTARG};;
        m  ) STA_MAC=${OPTARG};;
        r  ) AP_RADIO=${OPTARG};;
        c  ) CONSOLE=${OPTARG};; # Aka screen session name
        p  ) IPERFSERVER=${OPTARG};;
        a  ) TARGET=${OPTARG};;
        s  ) STA_TYPE=${OPTARG};;
        y  ) LABEL1=${OPTARG};; # Temp
        z  ) LABEL2=${OPTARG};; # Temp
        f  ) remote_test=true; remote_friendlyname=${OPTARG};;
        ? ) echo "Unknown option: -$OPTARG" >&2; exit 1;;
        :  ) echo "Missing option argument for -$OPTARG" >&2; exit 1;;
        *  ) echo "Unimplemented option: -$OPTARG" >&2; exit 1;;
    esac
done

if [ $remote_test = false ]; then
if [ $ap_checking = true ];then
	if [ $AP_TYPE = false ] || [ $AP_LABEL = false ] || [ $AP_RADIO = false ];then 
echo "You forgot to use any of the following mandatory arguments:"
echo "$(( set -o posix ; set ) | grep false)"
echo
exit 1
	fi
fi

if [ $IPERFSERVER = false ] || [ $TARGET = false ] || [ $STA_TYPE = false ] || [ $STA_MAC = false ]
then
echo "You forgot to use any of the following mandatory arguments:"
echo "$(( set -o posix ; set ) | grep false)"
echo
exit 1
fi

# Kill leftover scripts
if [ $(pgrep -f 'celeno|3384_expect' | wc -l) -gt 8 ];then
kill $(pgrep -f 'celeno|3384_expect ' | head -1) && echo Killed some leftover scripts..
else echo "no leftover scripts detected (OK)"
fi
fi

# Celeno AP
if [ $AP_TYPE = "celeno" ]; then
 if [ $AP_RADIO = "5ghz" ];then AP_RADIO=wlan1_0
 elif [ $AP_RADIO = "2.4ghz" ]; then AP_RADIO=wlan0_0
 elif [ $AP_RADIO = "bs" ]; then
  snmpset -v2c -c private $AP_IP .1.3.6.1.4.1.35604.2.3.103.0 s "iw wlan0_0 station dump" &&
  declare -i wlan0_0=`snmpget -v2c -c private $AP_IP .1.3.6.1.4.1.35604.2.3.104.0 | grep -i $STA_MAC -A 1 | grep inactive | awk {'print $3'}` && 
  snmpset -v2c -c private $AP_IP .1.3.6.1.4.1.35604.2.3.103.0 s "iw wlan1_0 station dump" &&
  declare -i wlan1_0=`snmpget -v2c -c private $AP_IP .1.3.6.1.4.1.35604.2.3.104.0 | grep -i $STA_MAC -A 1 | grep inactive | awk {'print $3'}` && 
   if [ $wlan1_0 -le 0 ];then AP_RADIO=wlan0_0
   elif [ $wlan0_0 -le 0 ]; then AP_RADIO=wlan1_0
   elif [ $wlan1_0 -eq $wlan0_0 ]; then echo 'STA not detected on any radio!'
   elif [ $wlan1_0 -gt $wlan0_0 ]; then AP_RADIO=wlan0_0 # However has been idle for longest is probably an outdated entry
    else AP_RADIO=wlan1_0
   fi
fi

# 2.4 Ghz is always HT or legacy
if [ $AP_RADIO = wlan0_0 ]; then phy=ht
elif [ $AP_RADIO = wlan1_0 ]; then

# This method only works if STA has either TX/RX rate with VHT caps
declare -i vht_detect=`snmpget -v2c -c private $AP_IP .1.3.6.1.4.1.35604.2.3.104.0 | grep -i $STA_MAC -A 11 | egrep -i 'vht|nss|80mhz' | wc -l`
 if [ $vht_detect -ge 1 ]; then phy=vht
 else phy=ht
 fi
fi

###
##
HOSTNAME="$(echo $STA_MAC | tr -d ':')"
failcheck="$(snmpget -v2c -c private $AP_IP .1.3.6.1.4.1.35604.2.3.101.0 | grep INT | wc -l)"

ap_script () {
if [ $ap_checking = true ];then
	if [ $iperf3_check -ge 1 ];then # Check if iperf3 server is busy and continue if so
#	bash $CELENO_SCRIPT 1> /dev/null

#### VHT TEMPLATE # Interal
#vhtparse="snmpset -d -v2c -c private \$IP .1.3.6.1.4.1.35604.2.3.103.0 s \"iw \$RADIO station dump | grep -i \$STA_MAC -A 17 | egrep 'tx bitrate|signal:' | xargs | sed 's/\[.*\]//' | tr -d 'short|GI' | sed 's/\<VHT-NSS\>//g' | sed -e \"s/^/\$direction /\" | awk '{print \$1,\$3,\$7,\$10,\$11,\$12,\$13}' | tr -d 'MHz' | sed -e \"s/^/\$(date \"+%b %d %H:%M:%S\") \$HOSTNAME tx_linkstats_vht[1337]: /\" && iw \$RADIO station dump | grep -i \$STA_MAC -A 17 | egrep 'rx bitrate|signal:' | xargs | sed 's/\[.*\]//' | tr -d 'short|GI' | sed 's/\<VHT-NSS\>//g' | sed -e \"s/^/\$direction /\" | awk '{print \$1,\$3,\$7,\$10,\$11,\$12,\$13}' | tr -d 'MHz' | sed -e \"s/^/\$(date \"+%b %d %H:%M:%S\") \$HOSTNAME rx_linkstats_vht[1337]: /\" && iw \$RADIO station dump | grep -i \$STA_MAC -A 17 | egrep 'bytes|packets|retries|failed' | xargs | tr -d 'rx|tx|bytes|packets|retries|failed:' | sed -e \"s/^/\$(date \"+%b %d %H:%M:%S\") \$HOSTNAME iw_counters[1337]: /\" | tr -s ' '\""
####

#### VHT TEMPLATE # External
#vhtparse="snmpset -v2c -c private \$IP .1.3.6.1.4.1.35604.2.3.103.0 s \"iw \$RADIO station dump | grep -i \$STA_MAC -A 17 | egrep 'tx bitrate|signal:' | xargs | sed 's/\[.*\]//' | tr -d 'short|GI' | sed 's/\<VHT-NSS\>//g' | sed -e \"s/^/\$direction /\" | awk '{print \$1,\$3,\$7,\$10,\$11,\$12,\$13}' | tr -d 'MHz' | sed -e \"s/^/\$(date \"+%b %d %H:%M:%S\") \$HOSTNAME tx_linkstats_vht[1337]: /\" && iw \$RADIO station dump | grep -i \$STA_MAC -A 17 | egrep 'rx bitrate|signal:' | xargs | sed 's/\[.*\]//' | tr -d 'short|GI' | sed 's/\<VHT-NSS\>//g' | sed -e \"s/^/\$direction /\" | awk '{print \$1,\$3,\$7,\$10,\$11,\$12,\$13}' | tr -d 'MHz' | sed -e \"s/^/\$(date \"+%b %d %H:%M:%S\") \$HOSTNAME rx_linkstats_vht[1337]: /\" && iw \$RADIO station dump | grep -i \$STA_MAC -A 17 | egrep 'bytes|packets|retries|failed' | xargs | tr -d 'rx|tx|bytes|packets|retries|failed:' | sed -e \"s/^/\$(date \"+%b %d %H:%M:%S\") \$HOSTNAME iw_counters[1337]: /\" | tr -s ' '\""
####

#### VHT TEMPLATE # Without syslog
#vhtparse_noparse="snmpset -v2c -c private \$IP .1.3.6.1.4.1.35604.2.3.103.0 s \"iw \$RADIO station dump\""
####
#eval $vhtparse && sleep 1 && snmpget -v2c -c private $IP .1.3.6.1.4.1.35604.2.3.104.0

if [ $failcheck 2> /dev/null -eq 1 ];then 

# Kill all old loops
# if $(pgrep -f celeno | wc -l) -gt 1;then kill $(pgrep -f celeno | head -1);fi

# For loop
for x in {1..9};do

# Fetch STA TX values
snmpset -v2c -c private $AP_IP .1.3.6.1.4.1.35604.2.3.103.0 s "iw $AP_RADIO station dump" && sleep 1 && snmpget -v2c -c private $AP_IP .1.3.6.1.4.1.35604.2.3.104.0 | grep -i $STA_MAC -A 17 | egrep 'tx bitrate|signal:' | xargs | sed 's/\[.*\]//' | tr -d 'short|GI' | sed 's/\<VHT-NSS\>//g' | sed -e "s/^/$AP_LABEL /" | awk '{print $1,$3,$7,$10,$11,$12,$13}' | tr -d 'MHz' | sed -e "s/^/$(date "+%b %d %H:%M:%S") $HOSTNAME tx_linkstats_${phy}_ap[1337]: $LABEL1 $LABEL2 /" >> $REDIRECT

# Fetch STA RX values
snmpset -v2c -c private $AP_IP .1.3.6.1.4.1.35604.2.3.103.0 s "iw $AP_RADIO station dump" && sleep 1 && snmpget -v2c -c private $AP_IP .1.3.6.1.4.1.35604.2.3.104.0 | grep -i $STA_MAC -A 17 | egrep 'rx bitrate|signal:' | xargs | sed 's/\[.*\]//' | tr -d 'short|GI' | sed 's/\<VHT-NSS\>//g' | sed -e "s/^/$AP_LABEL /" | awk '{print $1,$3,$7,$10,$11,$12,$13}' | tr -d 'MHz' | sed -e "s/^/$(date "+%b %d %H:%M:%S") $HOSTNAME rx_linkstats_${phy}_ap[1337]: $LABEL1 $LABEL2 /" >> $REDIRECT

# Fetch STA counters
snmpset -v2c -c private $AP_IP .1.3.6.1.4.1.35604.2.3.103.0 s "iw $AP_RADIO station dump" && sleep 1 && snmpget -v2c -c private $AP_IP .1.3.6.1.4.1.35604.2.3.104.0 | grep -i $STA_MAC -A 17 | egrep 'bytes|packets|retries|failed' | xargs | tr -d 'rx|tx|bytes|packets|retries|failed:' | sed -e "s/^/$AP_LABEL /" | sed -e "s/^/$(date "+%b %d %H:%M:%S") $HOSTNAME iw_counters_ap[1337]: $LABEL1 $LABEL2 /" | tr -s ' ' >> $REDIRECT
done

# What to do if SNMP isn't working?
else echo "Got an SNMP error, continuing anyway" # && exit 1
fi
        else echo "server is not busy so not running AP script.."
        fi
else echo 'ap checking disabled.'
fi
}

fi

# Broadcom AP
if [ $AP_TYPE = "broadcom" ]; then
HOSTNAME="$(echo $STA_MAC | tr -d ':')"
if [ $AP_RADIO = "5ghz" ];then AP_RADIO=wl1 # Only works with 4x4 AP
elif [ $AP_RADIO = "2.4ghz" ]; then AP_RADIO=wl0 # Not implemented in local script
fi

# Function for transfering logs from the console output
logtransfer () {
string=3384_

tail -n0 -F $brcm_logpath1 | \
while read LINE
do
  if echo "$LINE" | grep "$string" 1>/dev/null 2>&1
  then
    echo "$LINE" >> $brcm_logpath2
  fi
done
}

# Kill overlapping jobs
if [ `pgrep -fac $brcm_logpath1` -ge 1 ]; then 
 kill $(pgrep -fa $brcm_logpath1 | awk {'print $1'})
else logtransfer &
fi

ap_script () {
if [ $ap_checking = true ];then
count="$(( ( RANDOM % 9999 )  + 100 ))"
	if [ $iperf3_check -ge 1 ];then # Check if iperf3 server is busy and continue if so
	screen -S $CONSOLE -X stuff "/data/./phy.sh $HOSTNAME $AP_RADIO $STA_MAC $LABEL1 $LABEL2 $count \n"
#	sleep 1
#	tail -300 $SCREENLOGFILE | grep $count >> $REDIRECT # Need proper func, tail is not enough
	else echo "server is not busy so not running AP script.."
	fi
else echo 'ap checking disabled.'
fi
}
fi

init_vars () {
ansible_status="$(ansible $TARGET -m ping)"
ansible_check="$(printf "$ansible_status" | grep SUCCESS | wc -l)"
if [ $server_unreachable = false ];then
iperf3_check="$(iperf3 -c $IPERFSERVER -t 1 | grep busy | wc -l)"
else iperf3_check=1
fi
}
# Init ansible/iperf check and save the status for later use
init_vars 
printf "$ansible_status" >> $iperf3log

# Start test function
start_test () {
        if [ $ansible_check -ge 1 ] && [ $iperf3_check -le 0 ];then
sleep 1
# Use -f arg to force iperf3 server instead of using config file
#ansible $TARGET -m shell -a "nohup /bin/bash $IPERF3_SCRIPT -4 $1 -f $IPERFSERVER &" >> $iperf3log &
ansible $TARGET -m shell -a "nohup /bin/bash $IPERF3_SCRIPT -4 $1 &" >> $iperf3log &
sleep 1; init_vars
# ap_script
else echo "Aborting because target is either unreachable ($ansible_check) or the iperf3 server is busy ($iperf3_check)" && exit 1
fi
}

mac_start_test () {
        if [ $ansible_check -ge 1 ] && [ $iperf3_check -le 0 ];then
sleep 1
# Pipe to sleep because for some reason with some GWs, the whole iperf3 session is teared down when ansible is finished
# Even though the script is completely daemonized with nohup/&
ansible $TARGET -m shell -a "nohup /bin/bash $IPERF3_SCRIPT $IPERFSERVER | sleep $TEST_LENGTH" >> $iperf3log &
sleep 2; init_vars
# ap_script
else echo "Aborting because target is either unreachable ($ansible_check) or the iperf3 server is busy ($iperf3_check)" && exit 1
fi
}

# Loop to try to mitigate from not properly ran tests..
failcheck () {
checkbusy="$(tail -300 $iperf3log | grep $TARGET | grep SUCCESS | wc -l)"
busyfail=0
while [ $checkbusy -eq 0 ]; do
echo "no entry in the log, test must've failed, trying again.."
sleep $[ ( $RANDOM % 1 ) + 3]s &&
if [ $STA_TYPE = mac ];then mac_start_test;else start_test;fi # WA for MAC
checkbusy="$(tail -300 $iperf3log | grep $TARGET | grep SUCCESS | wc -l)"

# Anti fail
busyfail=$(( $busyfail + 1 ))
if [ $busyfail -ge 20 ]; then
echo "[$logtag] Giving up, since we didn't manage to access the server for over $busyfail retries. How can it be this busy?" | logger -p local5.err && break
fi
done
}

#
# Start doing stuff

if [ $server_unreachable = true ];then
iperf3_check=0
fi

# Remote test
# This is for when the station is running the iperf3 server (good for dumb clients like Windows)
if [ $remote_test = true ];then

anti_overload () {
while [ `pgrep -fc 'iperf3 --client'` -ge 30 ];do kill $(pgrep -f "iperf3 --client" | awk '{print $1}') && echo "[$logtag] We're overloaded with daemons, killing everything" | logger -p local5.err ; done
}

# Make sure that the test is performed and not "skipped" due to the server becoming busy after we exited the first busy loop
busy_failcheck () {
checkbusy="$(tail -1 $iperf3log | grep $count | egrep 'busy|later' | wc -l)"
busyfail=0
while [ $checkbusy -eq 1 ]; do
echo "[$logtag] Everything seemed ok but we didn't run any test, looping until server is not busy ($busyfail)" | logger -p info &&
sleep $[ ( $RANDOM % 20 ) + 11]s &&
iperf_daemon
checkbusy="$(tail -1 $iperf3log | grep $count | egrep 'busy|later' | wc -l)"

# Anti fail
busyfail=$(( $busyfail + 1 ))
if [ $busyfail -ge 20 ]; then
echo "[$logtag] Giving up, since we didn't manage to access the server for over $busyfail retries. How can it be this busy?" | logger -p local5.err && break
fi
done
}

iperf3_parse () {
egrep 'SUM.*receiver|SUM.*sender|busy' | awk '{print $6,$8}' | tr -d ':|receiver' | xargs | sed -e "s/^/$(date "+%b %d %H:%M:%S") $TARGET $logtag: /"
}

   if [ $upstream = true ]; then
   iperf_daemon () {
   iperf3 --client $IPERFSERVER -4 -R -P $chprobe_iperf3tcp_sessions -t $chprobe_iperf3tcp_duration -O $chprobe_iperf3tcp_omitduration | iperf3_parse
   }
   elif [ $downstream = true ]; then
   iperf_daemon () {
   iperf3 --client $IPERFSERVER -4 -P $chprobe_iperf3tcp_sessions -t $chprobe_iperf3tcp_duration -O $chprobe_iperf3tcp_omitduration | iperf3_parse
   }
   fi

# Iperf daemon and condititions
start_iperf3 () {
anti_overload

# We check the status of the iperf3 server and again if another test is running 
case "$(pgrep -fc "iperf3 --client")" in

0)  echo "[$logtag] Let's see if we can start the daemon" | logger -p info
    serverbusy_loop
    echo "[$logtag] Starting $logtag [debug: $localstatus | $(pgrep -fc 'iperf3 --client')]" | logger -p notice
    iperf_daemon;busy_failcheck && echo "[$logtag] daemon finished" | logger -p info &&
;;
1)  echo "[$logtag] iperf daemon is already running" | logger -p info
          while [ `pgrep -fc 'iperf3 --client'` -ge 1 ];do sleep $[ ( $RANDOM % $probetimer ) + 3]s && echo "[$logtag] waiting cuz either an iperf3 or a bbk daemon is running" | logger -p info;done
            serverbusy_loop
    echo "[$logtag] Starting $logtag [debug: $localstatus | $(pgrep -fc 'iperf3 --client')]" | logger -p notice
    iperf_daemon;busy_failcheck && echo "[$logtag] daemon finished" | logger -p info
;;
*)  echo "[$logtag] multiple instances of iperf3 daemon running. Stopping & restarting iperf:" | logger -p info
    kill $(pgrep -f "iperf3 --client" | awk '{print $1}')
    ;;
esac;
}

fi

if [ $upstream = true ]; then 
	if [ $STA_TYPE = mac ];then 
# Macs have different scripts depending on direction so..
IPERF3_SCRIPT="~/Labb-stuff/probes/mac_tcp_iperf3_client-logstash.sh"
mac_start_test;failcheck;ap_script && rm -f $iperf3log
elif [ $STA_TYPE = linux ];then
start_test '-u';failcheck;ap_script && rm -f $iperf3log
elif [ $STA_TYPE = win ];then echo 'aborting, not implemented' && exit 1
else if [ $remote_test = false ];then echo "wrong sta_type (must be either "mac", "linux", or "win - Aborting"" && exit 1;fi	
	fi
fi

if [ $downstream = true ]; then
	if [ $STA_TYPE = mac ];then
# Macs have different scripts depending on direction so..
IPERF3_SCRIPT="~/Labb-stuff/probes/mac_tcp_iperf3_client_reversed-logstash.sh"
mac_start_test;failcheck;ap_script && rm -f $iperf3log
elif [ $STA_TYPE = linux ];then 
start_test '-d';failcheck;ap_script && rm -f $iperf3log
elif [ $STA_TYPE = win ];then echo 'aborting, not implemented' && exit 1
else if [ $remote_test = false ];then echo "wrong sta_type (must be either "mac", "linux", or "win - Aborting"" && exit 1;fi
	fi
fi

# Kill overlapping logtransfer jobs (if broadcom_ap)
if [ $AP_TYPE = "broadcom" ]; then
 if [ `pgrep -fac $brcm_logpath1` -ge 1 ]; then
 sleep $[ $TEST_LENGTH - 1 ] && kill $(pgrep -fa $brcm_logpath1 | awk {'print $1'})
 fi
fi
